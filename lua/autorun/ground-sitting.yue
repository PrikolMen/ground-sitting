addonName = "Ground Sitting"

PLAYER, ENTITY = FindMetaTable( "Player" ), FindMetaTable( "Entity" )

isSittingOnGround = nil
do

    :GetNW2Bool = ENTITY

    isSittingOnGround = =>
        return GetNW2Bool( @, addonName )

    PLAYER.IsSittingOnGround = isSittingOnGround

do

    :GetButtons, :SetButtons, :SetSideSpeed, :SetForwardSpeed, :SetUpSpeed = FindMetaTable( "CMoveData" )
    :GetMoveType, :IsOnGround = ENTITY
    :Alive, :InVehicle = PLAYER
    :bor, :band, :bxor = bit

    MOVETYPE_WALK = MOVETYPE_WALK
    IN_SPEED = IN_SPEED
    IN_JUMP = IN_JUMP
    IN_DUCK = IN_DUCK

    IN_DUCK_WITH_JUMP = bor( IN_JUMP, IN_DUCK )

    hook.Add "SetupMove", addonName, ( mv ) =>
        unless isSittingOnGround( @ )
            return

        if SERVER and ( not Alive( @ ) or GetMoveType( @ ) ~= MOVETYPE_WALK or InVehicle( @ ) or not IsOnGround( @ ) )
            @RequestSittingOnGround( false )
            return

        buttons = GetButtons( mv )
        if band( buttons, IN_DUCK ) == IN_DUCK
            buttons = bxor( bor( buttons, IN_SPEED ), IN_SPEED )
        else
            SetForwardSpeed( mv, 0 )
            SetSideSpeed( mv, 0 )
            SetUpSpeed( mv, 0 )

        SetButtons( mv, bxor( bor( buttons, IN_DUCK_WITH_JUMP ), IN_JUMP ) )

do

    :Length2DSqr = FindMetaTable( "Vector" )
    ACT_HL2MP_IDLE = ACT_HL2MP_IDLE
    :LookupSequence = ENTITY

    hook.Add "CalcMainActivity", addonName, ( velocity ) =>
        if isSittingOnGround( @ ) and Length2DSqr( velocity ) < 1
            return ACT_HL2MP_IDLE, LookupSequence( @, "pose_ducking_02" )

unless SERVER
    return

do

    :TraceLine = util
    trace = {}

    hook.Add "PlayerGroundSit", addonName, ( reqested ) =>
        unless reqested
            return

        unless @Crouching! and @IsOnGround!
            return false

        trace.start = @GetShootPos!
        trace.endpos = trace.start + @GetAimVector! * 72
        trace.filter = @

        traceResult = TraceLine( trace )
        unless traceResult.Hit
            return false

        if @EyeAngles![ 1 ] < 80
            return false

do

    :Call = hook

    PLAYER.RequestSittingOnGround = ( reqested, force ) =>
        if isSittingOnGround( @ ) == reqested
            return false

        if not force and Call( "PlayerGroundSit", nil, @, reqested ) == false
            return false

        @SetNW2Bool( addonName, reqested )
        @m_bNextGroundSit = CurTime! + 1
        return true

hook.Add "KeyPress", addonName, ( key ) =>
    switch key
        when IN_USE
            @RequestSittingOnGround( true )

        when IN_JUMP
            @RequestSittingOnGround( false )

concommand.Add "ground_sit", =>
    if ( @m_bNextGroundSit or 0 ) > CurTime!
        return

    @RequestSittingOnGround( not isSittingOnGround( @ ) )
